AnimTriggerRead: Read configuration data for AnimTrigger objects. Parameters: `uint* path` Path to the configuration file, e.g., 'LOCAL:Animtrigger'.
CompilerCleanup: Cleanup files after compiling. Parameters: `int* file` File to be cleaned up after compilation.
ConfigCompile: Compile any configuration file. Parameters: `int p1` Unknown parameter, `char* cfg_file` Path to the configuration file, `int p3` Unknown parameter.
ConfigRead: Read a game configuration file. Parameters: `char* cfg_file` Path to the configuration file, e.g., 'LOCAL:config.qsc'.
ConfigWrite: Write a game configuration file. Parameters: `char* cfg_file` Path to the configuration file, e.g., 'LOCAL:config.qsc'.
CutsceneDelete: Delete the current cutscene. Parameters: `char* buffer` Buffer of size 30.
ErrorShow: Show an error message from the game. Parameters: `char* err_msg` Error message to display.
FramesSet: Set the game's frame rate. Parameters: `int frames` Desired frames per second (e.g., 30, 60, max 240 FPS).
GameMaterialLoad: Load the game's material data into memory. No parameters.
GraphicsReset: Reset the game's graphics options to default settings. Parameters: `char* buffer` Buffer of size 30.
GraphOpen: Open a graph for a specific game level. Parameters: `uint level` Level identifier, `char* graph_str` Path or name of the graph file (e.g., 'Graph4019.dat').
HumanplayerLoad: Load the Humanplayer.qvm file into memory. No parameters.
InputDisable: Disable player input. Parameters: `char* buffer` Buffer of size 30.
InputEnable: Enable player input. Parameters: `char* buffer` Buffer of size 30.
LogAdd: Add an internal game log message. Parameters: `byte* log_msg` Message to log.
LevelLoad: Load a specified game level. Parameters: `int level_path` Path to the level, `int level_len` Length of the level.
LevelQuit: Quit the current game level and return to the main menu. No parameters.
LevelRestart: Restart the current game level. No parameters.
LevelStart: Start a new game level. Parameters: `int p1` Unknown parameter.
MenuManager: Load the menu manager for in-game or main menu. Parameters: `int p1` Unknown parameter, `char* menu_str` Menu string, `char p3` Unknown parameter, `char p4` Unknown parameter, `int p5` Unknown parameter.
MusicDisable: Disable in-game music. Parameters: `char* buffer` Buffer of size 30.
MusicEnable: Enable in-game music. Parameters: `char* buffer` Buffer of size 30.
MusicSetSfxVolume: Set the sound effects volume. Parameters: `float volume` Volume level (range: 0.0 1.0).
MusicSetVolume: Set the music volume. Parameters: `float volume` Volume level (range: 0.0 1.0).
MusicUpdateVolume: Update the current music volume. Parameters: `char* buffer` Buffer of size 30.
PhysicsObjTypeRead: Read a configuration file for physics objects. Parameters: `char* cfg_file` Path to the configuration file.
QhashInit: Initialize a hash table. Parameters: `char hash_val` Hash value (0 or 1).
QhashReset: Reset the QTask type hash table. No parameters.
QscCompile: Compile a QSC script file into QVM. Parameters: `char* qsc_file` Path to the QSC script file (e.g., 'LOCAL:objects.qsc').
QtaskUpdate: Update the QTask hash table before loading a level. No parameters.
QtaskUpdateList: Update all QTask lists. Parameters: `int* p1` Unknown parameter.
QvmAssemble: Assemble a QAS assembler file. Parameters: `char *file_out` Output file, `char *file_in` Input file.
QvmCompile: Compile a QVM file loaded in memory. Parameters: `int file` Address of the QVM file loaded from 'LoadResource' method.
QvmLoad: Compile and load a .qvm file into memory. Parameters: `char *file_name` Name of the .qvm file to load. Returns the filename loaded.
QvmParse: Parse an assembler source file. Parameters: `char *file_name` Name of the QAS file, `int mem_alloc_addr` Memory allocated by Mem_Alloc(). Returns status.
ResourceFlush: Release the currently held resources. Parameters: `int* p1` Unknown parameter.
ResourceLoad: Load a resource into memory and return its address. Parameters: `char *resource_file` Path to the resource file (e.g., 'sounds.res'), `char **buffer` Buffer to store the resource.
ResourceUnload: Unload a resource loaded in memory. Parameters: `int *resource_file` Resource file to unload.
IsResourceLoaded: Check if a resource is loaded in memory. Parameters: `char *res_file` Resource file name (e.g., 'sounds.qvm'), `int *res_file_ptr` Address of the resource file.
ResourcePackUnpack: Pack or unpack a resource file into memory. Parameters: `char *res_file` Resource file name (e.g., 'sounds.res' or 'terrain.res'), `char **buffer` Buffer for the resource.
ResourceUnpack: Unpack a resource file into memory. Parameters: `int* res_ptr` Resource pointer, `int res_addr` Address where to unpack (allocated using Mem_Alloc), `int res_size` Size of the resource.
ScriptInit: Initialize a script buffer for the assembler. Parameters: `char* file_name` Name of the script file (use QvmLoad(file_name) first).
ScriptSetsymbolCxt: Set the symbol context before loading it. Parameters: `byte *symbol_name` Symbol name (e.g., 'TaskType_Set'), `int** symbol_buf` Symbol buffer.
StatusMessageClear: Clear the current status message from the screen (not from memory). Parameters: `char* buffer` Buffer of size 30.
StatusMessageShow: Show a status message on the screen. Parameters: `int status_timer` Timer value, `char* msg` Message to show, `char *sprite` Sprite of the message, `char *status_byte` Status byte.
SymbolRemove: Remove a symbol from memory. Parameters: `int *p1` Pointer, `int *symbol_name` Symbol name (e.g., 'TaskType_Set').
TasktypeSet: Define new constants for the game and scripts. Parameters: `int** task_str` Task string (e

.g., (int**)WEAPONTYPE_PISTOL), `int task_id` Task ID.
WarningShow: Show a warning message. Parameters: `char* warn_msg` Warning message to show.
WeaponConfigRead: Read a weapon configuration file into memory. Parameters: `int p1` Unknown parameter, `char *cfg_file` Path to the weapon configuration file (e.g., 'weaponconfig.qvm').
SymbolCheck: Check if a symbol is already loaded in the QTask list. Parameters: `int *p1` Pointer, `int **symbol_name` Symbol name (e.g., 'TaskType_Set'), `int* p3` Unknown parameter.
GameDefineOptions: Define game options constants. Parameters: `int **option_str` Option string (e.g., (int**) 'DefineAmmoType'), `int option_func_addr` Option function address, `int opt1` Option parameter 1, `int opt2` Option parameter 2.
ScriptBufInit: Initialize a buffer for scripts. Parameters: `int *buff_arr1` Buffer array 1, `int buff_arr2` Buffer array 2, `int buff` Buffer, `int buff_size` Size of the buffer.
SoundLoad: Load all level sounds from a specified path. Parameters: `char *sound_dir` Path to the sound directory (e.g., 'MISSION:sounds').
MemoryAlloc: Allocate memory for the game. Parameters: `int num` Number of memory blocks to allocate, `int size` Size of each memory block.
MemoryDealloc: Deallocate previously allocated memory. No parameters.
MissionOpen: Open the current mission file. Parameters: `char **ptr_file` Pointer to the mission file.
FileOpen: Open a file for reading or writing. Parameters: `const char* file` File path, `char *mode` File access mode.
QFileOpen: Open a Qfile (QSC, QVM) for reading or writing. Parameters: `const char* file` File path, `char *mode` File access mode.
RigidDyncubeObjRead: Read a configuration file for rigid dynamic cube objects. Parameters: `uint *cfg_file` Path to the configuration file.
MagicObjLoad: Load magic objects from a specified path. Parameters: `char *path` Path to the magic objects (e.g., 'LOCAL:magicobj').
AnimTriggerLoad: Load animation trigger objects from a specified path. Parameters: `char *path` Path to the animation trigger objects (e.g., 'LOCAL:animtrigger').
PhysicsObjLoad: Load physics objects from a specified path. Parameters: `char *path` Path to the physics objects (e.g., 'LOCAL:physicsobj').
AmmoTypeOpen: Open the ammo QVM file to memory for all weapons loaded. No parameters.
WeaponTypeOpen: Open all weapons defined in the .qsc file for the Human player. No parameters.
GameDataSymbolLoad: Load game data symbols to a buffer for game variables, UI controls, timers, etc. Parameters: `char* sym_buf` Symbol buffer, `char* sym_path` Path to the symbol, `char* sym_name` Symbol name (e.g., 'LOCAL:models/%s.mef','000_02_1').
GameDataSymbolRemove: Remove game data symbols for game variables, UI controls, timers, etc. Parameters: `char* sym_buf` Symbol buffer.
SymbolRegisterBool8: Register a new symbol of type 'Boolean' for game variables, UI controls, timers, etc. Parameters: `int **sym_buf` Symbol buffer, `int sym_addr` Symbol address.
SymbolRegisterInt16: Register a new symbol of type 'Int16' for game variables, UI controls, timers, etc. Parameters: `int **sym_buf` Symbol buffer, `int sym_addr` Symbol address.
SymbolRegisterInt32: Register a new symbol of type 'Int32' for game variables, UI controls, timers, etc. Parameters: `int **sym_buf` Symbol buffer, `int sym_addr` Symbol address.
SymbolRegisterReal32: Register a new symbol of type 'Real32 aka Float' for game variables, UI controls, timers, etc. Parameters: `int **sym_buf` Symbol buffer, `int sym_addr` Symbol address.
LoadingScreenShow: Show the menu loading screen before loading a level. Parameters: `int loading_type` Loading type.
QTaskHashTableSet: Main hash table for QTask types for objects (Guns, Ammo, Scripts, Variables, etc.) throughout the game. The hash table is 70 bytes long for each QTask. Parameters: `int **symbol` Symbol, `int ptr_func` Pointer to function, `int symbol_val` Symbol value, `int p4` Unknown parameter, `int p5` Unknown parameter, `int p6` Unknown parameter, `int p7` Unknown parameter.
WeaponsCountGet: Get the total number of weapons in the game. No parameters.
WeaponGunPickup: Pickup a weapon from the ground. Parameters: `int param_ptr` Parameter pointer, `int* type_ptr` Type pointer (set Weapon ID in type_ptr).
WeaponAmmoPickup: Pickup ammo from the ground. Parameters: `int param_ptr` Parameter pointer, `int* type_ptr` Type pointer (set Ammo ID in type_ptr).
PlayerXPHit: Get the player's XP hit damage for the current health. No parameters.
HumanViewCam: Set the camera view for the Human Player/Soldier. Parameters: `int soldier_ptr` Pointer to the soldier, `int cam_type` Camera type (1-6).
HumanTaskViewReset: Reset the Human view angle after changing it by zooming (e.g., with Dragunov or Binoculars). Parameters: `int human_ptr` Pointer to the Human.
IsPlayerProfileActive: Check if the current player profile is active. No parameters.
SoldierExecute: Execute the current soldier in the level. Parameters: `int ptr` Pointer, `int addr` Address.